//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/InputActions/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace LikeSoulKnight
{
    public partial class @GameInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GameInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""GamePlayInputMaps"",
            ""id"": ""3c817a66-e6fa-4749-bcbb-d0976c1eb6f3"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""0f4340df-87b3-492d-b311-2eeeae4ab170"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shooting"",
                    ""type"": ""Value"",
                    ""id"": ""8a5d2a0c-a8b1-477c-808a-4fc4658faf11"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""0f91d43d-279b-4dfa-b1c7-95124106d482"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""ea44c8e2-b355-4ff0-a665-fb2a6742cffb"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f809ee8b-2f2c-46fc-a7b8-b66999049204"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""04e2dd7b-7de5-479b-8704-6f8594b7a3dd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""dda59ee2-4d0b-4e23-8387-5f14a6a51fc2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5d0441ea-52dc-42d7-8e8a-4101b55fcf6d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""331fe844-850a-4197-95b2-0fb8babc9f17"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shooting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c7f2eec8-7c7c-4768-8e20-e6b27a20aca3"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // GamePlayInputMaps
            m_GamePlayInputMaps = asset.FindActionMap("GamePlayInputMaps", throwIfNotFound: true);
            m_GamePlayInputMaps_Movement = m_GamePlayInputMaps.FindAction("Movement", throwIfNotFound: true);
            m_GamePlayInputMaps_Shooting = m_GamePlayInputMaps.FindAction("Shooting", throwIfNotFound: true);
            m_GamePlayInputMaps_Aim = m_GamePlayInputMaps.FindAction("Aim", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // GamePlayInputMaps
        private readonly InputActionMap m_GamePlayInputMaps;
        private List<IGamePlayInputMapsActions> m_GamePlayInputMapsActionsCallbackInterfaces = new List<IGamePlayInputMapsActions>();
        private readonly InputAction m_GamePlayInputMaps_Movement;
        private readonly InputAction m_GamePlayInputMaps_Shooting;
        private readonly InputAction m_GamePlayInputMaps_Aim;
        public struct GamePlayInputMapsActions
        {
            private @GameInput m_Wrapper;
            public GamePlayInputMapsActions(@GameInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_GamePlayInputMaps_Movement;
            public InputAction @Shooting => m_Wrapper.m_GamePlayInputMaps_Shooting;
            public InputAction @Aim => m_Wrapper.m_GamePlayInputMaps_Aim;
            public InputActionMap Get() { return m_Wrapper.m_GamePlayInputMaps; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GamePlayInputMapsActions set) { return set.Get(); }
            public void AddCallbacks(IGamePlayInputMapsActions instance)
            {
                if (instance == null || m_Wrapper.m_GamePlayInputMapsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GamePlayInputMapsActionsCallbackInterfaces.Add(instance);
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Shooting.started += instance.OnShooting;
                @Shooting.performed += instance.OnShooting;
                @Shooting.canceled += instance.OnShooting;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
            }

            private void UnregisterCallbacks(IGamePlayInputMapsActions instance)
            {
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
                @Shooting.started -= instance.OnShooting;
                @Shooting.performed -= instance.OnShooting;
                @Shooting.canceled -= instance.OnShooting;
                @Aim.started -= instance.OnAim;
                @Aim.performed -= instance.OnAim;
                @Aim.canceled -= instance.OnAim;
            }

            public void RemoveCallbacks(IGamePlayInputMapsActions instance)
            {
                if (m_Wrapper.m_GamePlayInputMapsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGamePlayInputMapsActions instance)
            {
                foreach (var item in m_Wrapper.m_GamePlayInputMapsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GamePlayInputMapsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GamePlayInputMapsActions @GamePlayInputMaps => new GamePlayInputMapsActions(this);
        public interface IGamePlayInputMapsActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnShooting(InputAction.CallbackContext context);
            void OnAim(InputAction.CallbackContext context);
        }
    }
}
